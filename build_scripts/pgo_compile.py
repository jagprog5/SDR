#!/usr/bin/env python3

import json
import argparse
import subprocess
import shlex

def compile(compile_commands_path: str, file_path: str):
    '''
    compile_commands_path: points to compile_commands.json, generated by cmake
    file_path: the file to rebuild. instead of generating the profile, it will use the profile
    '''
    with open(compile_commands_path, "r") as f:
        content = json.load(f)
    for elem in content:
        if elem["file"] == file_path:
            command = elem["command"]
            command = shlex.split(command)
            for i in range(len(command)):
                if command[i] == "-fprofile-generate":
                    command[i] = "-fprofile-use"
            # run it
            p = subprocess.run(command, stderr=subprocess.PIPE, text=True)
            print(p.stderr, end='')
            if p.returncode != 0:
                print("FAILED to compile \"" + file_path + "\" for pgo")
                print(command)
            return p.returncode
    print("FAILED to find compile command: \"" + file_path + "\"")
    return 111


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="compiles a cmake target for a pgo second pass")
    parser.add_argument("compile-commands-path", type=str)
    parser.add_argument("file-path", type=str)
    args = parser.parse_args()
    exit(compile(getattr(args, "compile-commands-path"), getattr(args, "file-path")))
